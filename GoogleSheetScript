const sheetName = 'Sheet1';
const scriptProp = PropertiesService.getScriptProperties();

function generateUID() {
  const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';
  const sections = [8, 4, 4, 4, 12];
  let uid = '';

  for (let i = 0; i < sections.length; i++) {
    for (let j = 0; j < sections[i]; j++) {
      const randomIndex = Math.floor(Math.random() * chars.length);
      uid += chars.charAt(randomIndex);
    }
    if (i < sections.length - 1) {
      uid += '-';
    }
  }

  return uid;
}

function deleteRowById(idToDelete) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const data = sheet.getDataRange().getValues();

  for (let i = 1; i < data.length; i++) {
    if (data[i][0] == idToDelete) {
      sheet.deleteRow(i + 1);
    }
  }
}

function checkRow(idToCheck) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const data = sheet.getDataRange().getValues();

  for (let i = 1; i < data.length; i++) {
    if (String(data[i][0]) === String(idToCheck)) {
      let hasOtherRecords = false;
      for (let j = 1; j < data[i].length; j++) {
        if (data[i][j] !== '') {
          hasOtherRecords = true;
          break;
        }
      }
      if (!hasOtherRecords) {
        return true;
      }
    }
  }

  return false;
}

function intialSetup() {
  const activeSpreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  scriptProp.setProperty('key', activeSpreadsheet.getId());
}

function doGet(e) {
  if (e.parameter && e.parameter.id) {
    const check = checkRow(e.parameter.id);
    return ContentService
      .createTextOutput(JSON.stringify({ 'result': check ? 'success' : 'error' }))
      .setMimeType(ContentService.MimeType.JSON);
  } else {
    return ContentService
      .createTextOutput(JSON.stringify({ 'result': 'error', 'error': 'Не указан параметр "id"' }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

function doPost(e) {
  const lock = LockService.getScriptLock();
  lock.tryLock(10000);

  try {
    const doc = SpreadsheetApp.openById(scriptProp.getProperty('key'));
    const sheet = doc.getSheetByName(sheetName);

    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const nextRow = sheet.getLastRow() + 1;

    const newRow = headers.map(function(header) {
      return header === 'timestamp' ? new Date() : e.parameter[header];
    });

    deleteRowById(e.parameter.id);
    sheet.getRange(nextRow, 1, 1, newRow.length).setValues([newRow]);

    return ContentService
      .createTextOutput(JSON.stringify({ 'result': 'success', 'row': nextRow, 'e': e }))
      .setMimeType(ContentService.MimeType.JSON);
  } catch (e) {
    return ContentService
      .createTextOutput(JSON.stringify({ 'result': 'error', 'error': e }))
      .setMimeType(ContentService.MimeType.JSON);
  } finally {
    lock.releaseLock();
  }
}
